plugins {
    id 'java'
}

group 'UiTests'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
// https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-server
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.141.59'
    // https://mvnrepository.com/artifact/org.testng/testng
    implementation group: 'org.testng', name: 'testng', version: '6.14.3'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '4.2.0'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // Including Core module as dependency
    compile project(path: ':core')

}


test {
    useTestNG() {
        useDefaultListeners = true
        systemProperties project.properties.subMap(["Host","Os","OSv","Br","BRv","App","Env","Trigger"])
    }
//c4734975350b0ff11f37b39809ecbba51320e0d0
}

task redxWebUiTest(type: Test) {
    useTestNG() {
        useDefaultListeners = true
        scanForTestClasses = false
        //jvmArgs(["-Ddataproviderthreadcount=${threads}"])
        testLogging.showStandardStreams = true
        systemProperties project.properties.subMap(["Host","Os","OSv","Br","BRv","App","Env","Trigger"])
        def smoke = project.hasProperty("Smoke")
        def sanity = project.hasProperty("Sanity")
        def regression = project.hasProperty("Reg")
        def deliveryChargeMismatchIssue = project.hasProperty("DCMI")
        def suburbsToSuburbs = project.hasProperty("STS")
        def suburbsToOSD = project.hasProperty("STO")
        def suburbsToISD = project.hasProperty("STI")
        def OSDToSuburbs = project.hasProperty("OTS")
        def OSDToISD = project.hasProperty("OTI")
        def ISDToSuburbs = project.hasProperty("ITS")
        def ISDToOSD = project.hasProperty("ITO")
        def homePageSanity = project.hasProperty("homePage")
        def parcelPageSanity = project.hasProperty("parcelPage")
        def createParcelPageSanity = project.hasProperty("createParcelPage")
        def createBulkParcelPageSanity = project.hasProperty("createBulkParcelPage")
        def couponsPageSanity = project.hasProperty("couponsPage")
        def paymentsPageSanity = project.hasProperty("paymentsPage")
        def trackParcelPageSanity = project.hasProperty("trackParcelPage")
        def myShopsPageSanity = project.hasProperty("myShopsPage")
        def pickupLocationPageSanity = project.hasProperty("pickupLocationPage")
        def myPaymentDetailsPageSanity = project.hasProperty("myPaymentDetailsPage")
        def notificationSettingsPageSanity = project.hasProperty("notificationSettingsPage")



        if (smoke) {
            suites "src/test/resources/mySuites/smokeSuite.xml"
        }
        if (sanity) {
            suites "src/test/resources/mySuites/sanitySuite.xml"
        }
        if (regression) {
            suites "src/test/resources/mySuites/regressionSuite.xml"
        }
        if (deliveryChargeMismatchIssue) {
            suites "src/test/resources/mySuites/DeliveryChargeMismatchIssueAutomation.xml"
        }
        if (suburbsToSuburbs) {
            suites "src/test/resources/mySuites/suburbsToSuburbsDeliveryChargeSuite.xml"
        }
        if (suburbsToOSD) {
            suites "src/test/resources/mySuites/suburbsToOSDDeliveryChargeSuite.xml"
        }
        if (suburbsToISD) {
            suites "src/test/resources/mySuites/suburbsToISDDeliveryChargeSuite.xml"
        }
        if (OSDToSuburbs) {
            suites "src/test/resources/mySuites/OSDToSuburbsDeliveryChargeSuite.xml"
        }
        if (OSDToISD) {
            suites "src/test/resources/mySuites/OSDToISDDeliveryChargeSuite.xml"
        }
        if (ISDToSuburbs) {
            suites "src/test/resources/mySuites/ISDToSuburbsDeliveryChargeSuite.xml"
        }
        if (ISDToOSD) {
            suites "src/test/resources/mySuites/ISDToOSDDeliveryChargeSuite.xml"
        }
        if (homePageSanity) {
            suites "src/test/resources/mySuites/homePageSanitySuite.xml"
        }
        if (parcelPageSanity) {
            suites "src/test/resources/mySuites/parcelPageSanitySuite.xml"
        }
        if (createParcelPageSanity) {
            suites "src/test/resources/mySuites/createParcelPageSanitySuite.xml"
        }
        if (createBulkParcelPageSanity) {
            suites "src/test/resources/mySuites/createBulkParcelPageSanitySuite.xml"
        }
        if (couponsPageSanity) {
            suites "src/test/resources/mySuites/couponsPageSanitySuite.xml"
        }
        if (paymentsPageSanity) {
            suites "src/test/resources/mySuites/paymentsPageSanitySuite.xml"
        }
        if (trackParcelPageSanity) {
            suites "src/test/resources/mySuites/trackParcelPageSanitySuite.xml"
        }
        if (myShopsPageSanity) {
            suites "src/test/resources/mySuites/myShopsPageSanitySuite.xml"
        }
        if (pickupLocationPageSanity) {
            suites "src/test/resources/mySuites/pickupLocationPageSanitySuite.xml"
        }
        if (myPaymentDetailsPageSanity) {
            suites "src/test/resources/mySuites/myPaymentDetailsPageSanitySuite.xml"
        }
        if (notificationSettingsPageSanity) {
            suites "src/test/resources/mySuites/notificationSettingsPageSanitySuite.xml"
        }

    }
}


task redxWebUiDebug(type: Test) {
    useTestNG() {
        useDefaultListeners = true
        scanForTestClasses = false
        //jvmArgs(["-Ddataproviderthreadcount=${threads}"])
        testLogging.showStandardStreams = true
        systemProperties project.properties.subMap(["Host","Os","OSv","Br","BRv","App","Env","Trigger"])
        suites "src/test/resources/mySuites/debugSuite.xml"
    }
}
