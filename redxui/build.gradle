plugins {
    id 'java'
}

group 'UiTests'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.testng/testng
    implementation group: 'org.testng', name: 'testng', version: '6.14.3'
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    // https://mvnrepository.com/artifact/io.appium/java-client
    implementation group: 'io.appium', name: 'java-client', version: '7.3.0'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '4.2.0'

    // Including Core module as dependency
    implementation project(path : ':core')
}

test{
    useTestNG(){
        useDefaultListeners = true
        systemProperties project.properties.subMap(["Host","Device","Version","App","Env","Trigger"])
    }
}


task redxuiTest(type: Test) {// we define a task with name ‘androiduiTest’
    useTestNG() {
        useDefaultListeners = true
        scanForTestClasses = false
        //jvmArgs(["-Ddataproviderthreadcount=${threads}"])
        testLogging.showStandardStreams = true
        systemProperties project.properties.subMap(["Host","Device","Version","App","Env","Trigger"])
        def smoke = project.hasProperty("Smoke")
        def integration = project.hasProperty("Int")
        def functional = project.hasProperty("Fun")
        def regression = project.hasProperty("Reg")
        def authentication = project.hasProperty("Authentication")
        def changeLanguage = project.hasProperty("ChangeLanguage")
        def createParcel = project.hasProperty("CreateParcel")
        def deleteParcel = project.hasProperty("DeleteParcel")
        def editParcel = project.hasProperty("EditParcel")
        def logout = project.hasProperty("Logout")
        def parcelDetails = project.hasProperty("ParcelDetails")
        def paymentInvoice = project.hasProperty("PaymentInvoice")
        def settings = project.hasProperty("Settings")
        def shopName = project.hasProperty("ShopName")

        def sanity = project.hasProperty("Sanity")

        if(smoke) {
            suites "src/test/resources/mySuites/smokeSuite.xml"
        }
        if(sanity) {
                if(authentication){
                    suites  "src/test/resources/mySuites/authenticationSanitySuite.xml";
                }
                else if (changeLanguage){
                    suites "src/test/resources/mySuites/changeLanguageSanitySuite.xml"
                }
                else if (createParcel){
                    suites "src/test/resources/mySuites/createParcelSanitySuite.xml"
                }
                else if (deleteParcel){
                    suites "src/test/resources/mySuites/deleteParcelSanitySuite.xml"
                }
                else if (editParcel){
                    suites "src/test/resources/mySuites/editParcelSanitySuite.xml"
                }
                else if (logout){
                    suites "src/test/resources/mySuites/logoutSanitySuite.xml"
                }
                else if (parcelDetails){
                    suites "src/test/resources/mySuites/parcelDetailsSanitySuite.xml"
                }
                else if (paymentInvoice){
                    suites "src/test/resources/mySuites/paymentInvoiceSanitySuite.xml"
                }
                else if (settings){
                    suites "src/test/resources/mySuites/settingsSanitySuite.xml"
                }
                else if (shopName){
                    suites "src/test/resources/mySuites/shopNameSanitySuite.xml"
                }
        }
        if(integration) {
            suites "src/test/resources/mySuites/integrationSuite.xml"
        }
        if(functional) {
            suites "src/test/resources/mySuites/functionalSuite.xml"
        }
        if(regression){
            suites "src/test/resources/mySuites/regressionSuite.xml"
        }
    }
}


task redxUiDebug(type: Test) {
    useTestNG() {
        useDefaultListeners = true
        scanForTestClasses = false
        //jvmArgs(["-Ddataproviderthreadcount=${threads}"])
        testLogging.showStandardStreams = true
        systemProperties project.properties.subMap(["Host","Device","Version","App","Env","Trigger"])
        suites "src/test/resources/mySuites/debugSuite.xml"
    }

}
