plugins {
    id 'java'
    id("io.qameta.allure") version "2.6.0"
}

group 'UiTests'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

description = "Allure Gradle TestNG example"
group = "org.example.allure"
version = version


allure {
    version = "2.9.0"
    autoconfigure = false
    aspectjweaver = true
    boolean clean = true
    resultsDir = file('build/allure-results')
    reportDir = file('build/reports/allure-report')

    useTestNG {
        version = "2.9.0"
    }
    downloadLink = 'https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/2.2.1/allure-2.2.1.zip'
}

dependencies {
    // https://mvnrepository.com/artifact/org.testng/testng
    implementation group: 'org.testng', name: 'testng', version: '6.14.3'
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    // https://mvnrepository.com/artifact/io.appium/java-client
    implementation group: 'io.appium', name: 'java-client', version: '7.3.0'
     //https://mvnrepository.com/artifact/io.qameta.allure/allure-testng
    implementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.13.3'
    // https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    implementation group: 'org.aspectj', name: 'aspectjrt', version: '1.7.3'
    // https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin
    implementation group: 'org.apache.maven.plugins', name: 'maven-compiler-plugin', version: '3.8.1'
    // https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin
    implementation group: 'org.apache.maven.plugins', name: 'maven-surefire-plugin', version: '2.19.1'
    // https://mvnrepository.com/artifact/aspectj/aspectjweaver
    implementation group: 'aspectj', name: 'aspectjweaver', version: '1.5.4'
    // https://mvnrepository.com/artifact/info.cukes/cucumber-testng
    implementation group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'
    // https://mvnrepository.com/artifact/io.cucumber/cucumber-java8
    //implementation group: 'io.cucumber', name: 'cucumber-java', version: '5.7.0'
    implementation group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    // https://mvnrepository.com/artifact/io.cucumber/cucumber-jvm-deps
    implementation group: 'io.cucumber', name: 'cucumber-jvm-deps', version: '1.0.6'
    // https://mvnrepository.com/artifact/net.masterthought/cucumber-reporting
    implementation group: 'net.masterthought', name: 'cucumber-reporting', version: '5.3.0'
    // https://mvnrepository.com/artifact/io.cucumber/gherkin
    implementation group: 'io.cucumber', name: 'gherkin', version: '5.1.0'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '4.2.0'


    // Including Core module as dependency
    implementation project(path : ':core')
}

configurations {
    cucumberRuntime.extendsFrom testRuntime
}

test{
    useTestNG(){
        useDefaultListeners = true
        systemProperties project.properties.subMap(["Host","Device","Version","App","Env","Trigger","User"])
    }
}


task androiduiTest(type: Test) {// we define a task with name ‘androiduiTest’
    useTestNG() {
        useDefaultListeners = true
        scanForTestClasses = false
        //jvmArgs(["-Ddataproviderthreadcount=${threads}"])
        testLogging.showStandardStreams = true
        systemProperties project.properties.subMap(["Host","Device","Version","App","Env","Trigger","User"])
        def smoke = project.hasProperty("Smoke")
        def regression = project.hasProperty("Reg")
        def sanity = project.hasProperty("Sanity")
        def search = project.hasProperty("Search")
        def pdp = project.hasProperty("PDP")
        def plp = project.hasProperty("PLP")
        def mybag = project.hasProperty("Bag")

        if(smoke) {
            suites "src/test/resources/mySuites/smokeSuite.xml"
        }
        
        if(regression){
            if(search){
                suites  "src/test/resources/mySuites/searchSuite.xml";
            }
            else if (pdp){
                suites "src/test/resources/mySuites/pdpSuite.xml"
            }
            else if (plp){
                suites "src/test/resources/mySuites/plpSuite.xml"
            }
            else if (mybag){
                suites "src/test/resources/mySuites/myBagRegressionSuite.xml"
            }
        }
        
        if (sanity){
            suites "src/test/resources/mySuites/sanitySuite.xml"
        }
    }
}


task androidUiDebug(type: Test) {
    useTestNG() {
        useDefaultListeners = true
        scanForTestClasses = false
        //jvmArgs(["-Ddataproviderthreadcount=${threads}"])
        testLogging.showStandardStreams = true
        systemProperties project.properties.subMap(["Host","Device","Version","App","Env","Trigger"])
        suites "src/test/resources/mySuites/debugSuite.xml"
    }
}


